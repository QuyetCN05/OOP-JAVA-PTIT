import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.util.*;

/**
 *
 * @author buihu
 */
public class J07016 {
    public static boolean tn(int n){
       
        int res=0;
        int ans=n;
        while(n !=0){
            res=res*10+n%10;
            n /=10;
        }
        return(ans==res);
    }

    public static boolean nt(int n) {
        if (n < 2) {
            return false;
        }
        for (int i = 2; i <= Math.sqrt(n); i++) {
            if (n % i == 0) {
                return false;
            }
        }
        return true;
    }

    public static void main(String[] args) throws FileNotFoundException, IOException, ClassNotFoundException {
        ObjectInputStream input = new ObjectInputStream(new FileInputStream("DATA1.in"));
        ObjectInputStream in = new ObjectInputStream(new FileInputStream("DATA2.in"));
        List<Integer> arr = (ArrayList) input.readObject();
        List<Integer> brr = (ArrayList) in.readObject();
        HashSet<Integer> set = new HashSet<>();
        HashSet<Integer> se = new HashSet<>();
        HashMap<Integer, Integer> map1 = new HashMap<>();
        HashMap<Integer, Integer> map2 = new HashMap<>();
        for (int x : arr) {
            if (nt(x) && tn(x)) {
                set.add(x);
                if (map1.containsKey(x)) {
                    map1.put(x, map1.get(x) + 1);
                } else {
                    map1.put(x, 1);
                }
            }
        }
        for (int y : brr) {
            if (nt(y) && tn(y)) {
                se.add(y);
                if (map2.containsKey(y)) {
                    map2.put(y, map2.get(y) + 1);
                } else {
                    map2.put(y, 1);
                }
            }
        }
        TreeMap<Integer, Integer> map = new TreeMap<>();
        for (int x : set) {
            if (map.containsKey(x)) {
                map.put(x, map.get(x) + 1);
            } else {
                map.put(x, 1);
            }
        }
        for (int y : se) {
            if (map.containsKey(y)) {
                map.put(y, map.get(y) + 1);
            } else {
                map.put(y, 1);
            }
        }
        Set<Map.Entry<Integer, Integer>> entrySet = map.entrySet();
        for (Map.Entry<Integer, Integer> entry : entrySet) {
            if (entry.getValue() == 2) {
                System.out.println(entry.getKey() + " " + map1.get(entry.getKey()) + " " + map2.get(entry.getKey()));
            }
        }

    }
}
